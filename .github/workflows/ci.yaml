name: Microservices CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: ecommercedb
        options: >-
          --health-cmd="pg_isready -U test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ðŸŸ© Node.js (User Service)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Node.js dependencies
        run: npm install
        working-directory: ./UserService

      - name: Run Node.js tests
        run: npm test --if-present
        working-directory: ./UserService

      # â˜• Java (Spring Boot microservices)
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Build all Spring Boot microservices
      - name: Build and test Product Service
        run: mvn clean verify
        working-directory: ./ProductService

      - name: Build and test Cart Service
        run: mvn clean verify
        working-directory: ./CartService

      - name: Build and test Order Service
        run: mvn clean verify
        working-directory: ./OrderService

      - name: Build and test Discovery Service
        run: mvn clean verify
        working-directory: ./DiscoveryService

      - name: Build and test API Gateway
        run: mvn clean verify
        working-directory: ./ApiGateway

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push User Service
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-deployment:user-service .
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-deployment:user-service
        working-directory: ./UserService

      - name: Build and push Product Service
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-deployment:products-service .
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-deployment:products-service
        working-directory: ./ProductService

      - name: Build and push Cart Service
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-deployment:cart-service .
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-deployment:cart-service
        working-directory: ./CartService

      - name: Build and push Order Service
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-deployment:order-service .
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-deployment:order-service
        working-directory: ./OrderService

      - name: Build and push Discovery Service
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-deployment:discovery-service .
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-deployment:discovery-service
        working-directory: ./DiscoveryService

      - name: Build and push API Gateway
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-deployment:api-gateway .
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-deployment:api-gateway
        working-directory: ./ApiGateway
